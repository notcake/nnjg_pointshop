local Player = FindMetaTable("Player")function Player:PS_GetPoints()	return self.PS_Points or 0endfunction Player:PS_GetItems()	return self.PS_Itemsendfunction Player:PS_GetItemCount(item_id)	if not self.PS_ItemCounts[item_id] and self:PS_HasItem(item_id) then		self.PS_ItemCounts[item_id] = 1	end	return self.PS_ItemCounts[item_id] or 0endfunction Player:PS_HasItem(item)	return table.HasValue(self.PS_Items, item)endfunction Player:PS_IsItemDisabled(item)	return self.PS_DisabledItems[item] or falseendfunction Player:PS_CanAfford(cost)	return self:PS_GetPoints() - cost >= 0endusermessage.Hook("PointShop_Points", function(um)	LocalPlayer().PS_Points = um:ReadLong() or 0end)datastream.Hook("PointShop_Items", function(handler, id, encoded, decoded)	LocalPlayer().PS_Items = decoded or {}end)usermessage.Hook("PointShop_Item", function(um)	local item_id = um:ReadString()	local count = um:ReadLong()	local disabled = um:ReadBool()	if count == 0 then		for k, v in ipairs(LocalPlayer().PS_Items) do			if v == item_id then				table.remove(LocalPlayer().PS_Items, k)				break			end		end	elseif not table.HasValue(LocalPlayer().PS_Items, item_id) then		table.insert(LocalPlayer().PS_Items, item_id)	end	LocalPlayer().PS_ItemCounts[item_id] = count ~= 0 and count or nil	LocalPlayer().PS_DisabledItems[item_id] = disabled and true or nilend)datastream.Hook("PointShop_ItemCounts", function(handler, id, encoded, decoded)	LocalPlayer().PS_ItemCounts = decoded or {}end)datastream.Hook("PointShop_DisabledItems", function(handler, id, encoded, decoded)	LocalPlayer().PS_DisabledItems = decoded or {}end)